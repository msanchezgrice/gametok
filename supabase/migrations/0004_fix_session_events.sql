-- Ensure session_events table exists with proper structure
create table if not exists public.session_events (
  id bigint generated by default as identity primary key,
  session_id uuid not null,
  event_type text not null,
  payload jsonb not null default '{}',
  occurred_at timestamptz not null default now()
);

-- Add foreign key if it doesn't exist
do $$
begin
  if not exists (
    select 1 from information_schema.table_constraints
    where constraint_name = 'session_events_session_id_fkey'
  ) then
    alter table public.session_events
    add constraint session_events_session_id_fkey
    foreign key (session_id) references public.game_sessions(id) on delete cascade;
  end if;
end $$;

-- Create index if it doesn't exist
create index if not exists idx_session_events_session on public.session_events (session_id);
create index if not exists idx_session_events_occurred_at on public.session_events (occurred_at);

-- Enable RLS
alter table public.session_events enable row level security;

-- Drop existing policies if they exist
drop policy if exists "Service role manages session events" on public.session_events;
drop policy if exists "Users read own session events" on public.session_events;

-- Create RLS policies
create policy "Service role manages session events"
  on public.session_events for all
  using (true)
  with check (true);

-- Allow authenticated users to read their own session events
create policy "Users read own session events"
  on public.session_events for select
  using (
    exists (
      select 1 from public.game_sessions
      where game_sessions.id = session_events.session_id
      and game_sessions.user_id = auth.uid()
    )
  );

-- Fix game_sessions table to accept UUID strings for id
alter table public.game_sessions alter column id type uuid using id::uuid;

-- Ensure game_sessions has proper RLS
alter table public.game_sessions enable row level security;

drop policy if exists "Service role manages sessions" on public.game_sessions;
drop policy if exists "Users read own sessions" on public.game_sessions;
drop policy if exists "Anonymous users can insert sessions" on public.game_sessions;

-- Allow anyone to create sessions (for anonymous play)
create policy "Anyone can create sessions"
  on public.game_sessions for insert
  with check (true);

-- Allow service role to manage all sessions
create policy "Service role manages sessions"
  on public.game_sessions for all
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

-- Allow users to read their own sessions
create policy "Users read own sessions"
  on public.game_sessions for select
  using (user_id = auth.uid() or user_id is null);

-- Ensure favorites table has proper RLS for anonymous users
alter table public.favorites enable row level security;

drop policy if exists "Anyone can manage favorites" on public.favorites;

-- For now, allow anyone to manage favorites (will be stored locally anyway)
create policy "Anyone can manage favorites"
  on public.favorites for all
  using (true)
  with check (true);